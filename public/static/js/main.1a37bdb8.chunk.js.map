{"version":3,"sources":["queries/query.js","components/EditRecipe.js","components/Spinner.js","components/CuisineName.js","components/MealType.js","components/Recipy.js","components/Recipes.js","App.js","reportWebVitals.js","index.js"],"names":["gql","getMealCuisinePivotQuery","getMealQuery","getRecipyQuery","getCuisineQuery","getOneCuisine","getOneMeal","getOneRecipy","updateRecipeMutation","EditRecipe","state","loading","selected_meal_id","mealOptions","isEditing","isDeleting","selected","disableFirst","mealsByID","cuisines","this","props","prevProps","prevState","recipe","cuisine_id","meal_id","setState","onChangeCuisine","value","console","log","selectVal","String","setMealOptions","e","preventDefault","variables","Number","id","response","refetchQueries","query","toast","success","name","autoClose","groupBy","cuisine_meal","setMealIdValue","meal_ids","map","mo","includes","target","keyBy","meals","cuisineOptions","cu","length","type","Go","title","className","onSubmit","onSubmitForm","bind","disabled","htmlFor","onChange","ref","input","onChangeMealHandeler","Component","compose","graphql","Spinner","CuisineName","data","cuisine","cuisineName","displayCuisineName","Fragment","options","MealType","meal","displayMealType","Recipy","recipy","recipy_id","Recipes","recipes","firstOptionMessage","desc","description","find","r","undefined","displayRecipes","notSelect","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a37bdb8.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\r\n\r\nconst getAuthorsQuery = gql`\r\n    {\r\n        authors {\r\n            name\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nconst getMealCuisinePivotQuery = gql`\r\n    {\r\n        cuisine_meal {\r\n            cuisine_id \r\n             meal_id\r\n        }\r\n    }\r\n`;\r\n\r\nconst getMealsQuery = gql`\r\n    {\r\n        authors {\r\n            name\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nconst getMealQuery = gql`\r\n    {\r\n        meals {\r\n            id\r\n            type\r\n        }\r\n    }\r\n`;\r\n\r\nconst getRecipyQuery = gql`\r\n    {\r\n        recipes {\r\n            name\r\n            id\r\n            description\r\n            meal_id\r\n            cuisine_id    \r\n          \r\n        }\r\n    }\r\n`;\r\n\r\n// cuisine   {\r\n//     name\r\n//     id\r\n// }\r\n// meal  {\r\n//     type\r\n//     id\r\n// }\r\n\r\n\r\n\r\n\r\nconst getCuisineQuery = gql`\r\n    {\r\n        cuisines {\r\n            name\r\n            id\r\n            meals   {\r\n                type\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n// const getOneCuisine = gql`\r\n//     query($id:ID){\r\n//         book(id:$id) {\r\n//           id\r\n//           name\r\n//           genre\r\n//           author {\r\n//             id\r\n//             name\r\n//             age\r\n//             books {\r\n//               name\r\n//               id\r\n//             }\r\n//           }\r\n//         }\r\n//     }\r\n// `;\r\n\r\nconst getOneCuisine = gql`\r\n    query($id:ID){\r\n        cuisine(id:$id) {\r\n          id\r\n          name\r\n        }\r\n    }\r\n`;\r\n\r\nconst getOneMeal = gql`\r\n    query($id:ID){\r\n        meal(id:$id) {\r\n          id\r\n          type\r\n        }\r\n    }\r\n`;\r\nconst getOneRecipy = gql`\r\n    query($id:ID){\r\n        recipy(id:$id) {\r\n          id\r\n          name\r\n          meal_id\r\n          cuisine_id\r\n          description\r\n        }\r\n    }\r\n`;\r\n\r\n\r\n\r\n\r\nconst addBookMutation = gql`\r\n    mutation($name : String! , $genre: String!, $authorId: ID!)  {\r\n     addBook(name:$name,genre:$genre,authorId:$authorId){\r\n      name\r\n      id\r\n     }    \r\n    }\r\n`;\r\n\r\nconst updateBookMutation = gql`\r\n    mutation($name : String! , $genre: String!, $id:  ID!)  {\r\n      updateBook(name:$name,genre:$genre,id:$id){\r\n      name\r\n      genre\r\n      id\r\n     }    \r\n    }\r\n`;\r\n\r\nconst updateRecipeMutation = gql`\r\n    mutation($cuisine_id : Int!  , $meal_id: Int! , $id:ID!)  {\r\n      updateRecipe(cuisine_id:$cuisine_id,meal_id:$meal_id,id:$id){\r\n        meal_id\r\n        cuisine_id\r\n        id\r\n     }    \r\n    }\r\n`;\r\n\r\n\r\nconst deleteBookMutation = gql`\r\n    mutation($id: ID!)  {\r\n     deleteBook(id : $id){\r\n      \r\n        name\r\n        id\r\n      \r\n     }    \r\n    }\r\n`;\r\nexport { getOneRecipy, getOneMeal, getMealQuery, deleteBookMutation, updateBookMutation, getMealsQuery, getOneCuisine, getCuisineQuery, addBookMutation, getRecipyQuery, getMealCuisinePivotQuery, getAuthorsQuery, updateRecipeMutation };\r\n\r\n","import { groupBy, keyBy } from \"lodash\";\r\nimport * as compose from 'lodash.flowright';\r\nimport React, { Component } from 'react';\r\nimport { graphql } from 'react-apollo';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { getCuisineQuery, getMealCuisinePivotQuery, getMealQuery, getRecipyQuery, updateRecipeMutation } from \"../queries/query\";\r\n\r\nclass EditRecipe extends Component {\r\n\r\n  state = {\r\n    loading: false,\r\n    selected_meal_id: '',\r\n    mealOptions: [],\r\n    isEditing: false,\r\n    isDeleting: false,\r\n    selected: '',\r\n    disableFirst: false,\r\n    mealsByID: {}\r\n  }\r\n  cuisineOptions() {\r\n    let cuisines = this.props.getCuisineQuery\r\n    let pivot = this.props.getMealCuisinePivotQuery\r\n    if (pivot.loading || cuisines.loading) return []\r\n\r\n    return cuisines.cuisines\r\n\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n\r\n    if (this.props.recipe !== prevProps.recipe) {\r\n      let selected = (this.props.recipe.cuisine_id)\r\n      let selected_meal_id = (this.props.recipe.meal_id)\r\n      this.setState({ selected, selected_meal_id })\r\n      this.onChangeCuisine(selected)\r\n    }\r\n  }\r\n  onChangeCuisine(value) {\r\n    console.log('this.selectVal', this.selectVal.value)\r\n    let selected = String(value)\r\n    this.setState({ disableFirst: true, selected })\r\n\r\n    this.setMealOptions(selected)\r\n  }\r\n  async onSubmitForm(e) {\r\n\r\n    e.preventDefault();\r\n\r\n    let variables = {\r\n      meal_id: Number(this.state.selected_meal_id),\r\n      cuisine_id: Number(this.state.selected),\r\n      id: Number(this.props.recipe.id)\r\n    }\r\n    this.setState({ loading: \"true\" })\r\n    let response = this.props.updateRecipeMutation(\r\n      {\r\n        variables,\r\n        refetchQueries: [{ query: getRecipyQuery }]\r\n      }\r\n    )\r\n    console.log('response', response)\r\n    this.setState({ loading: false })\r\n    toast.success(this.props.recipe.name + \" UPDATED!\", { autoClose: 3000 });\r\n\r\n\r\n\r\n\r\n  }\r\n  setMealOptions(selected) {\r\n    let mealOptions = groupBy(this.props.getMealCuisinePivotQuery.cuisine_meal, 'cuisine_id')[selected]\r\n    if (!mealOptions) mealOptions = []\r\n\r\n    this.setState({ mealOptions })\r\n    this.setMealIdValue(mealOptions)\r\n\r\n  }\r\n\r\n\r\n  setMealIdValue(mealOptions) {\r\n\r\n    let meal_ids = mealOptions.map(mo => mo.meal_id)\r\n    if (!meal_ids.includes(this.state.selected_meal_id))\r\n      this.setState({ selected_meal_id: meal_ids[0] })\r\n  }\r\n\r\n  onChangeMealHandeler(e) {\r\n\r\n    this.setState({ selected_meal_id: e.target.value })\r\n  }\r\n  render() {\r\n    let recipe = this.props.recipe\r\n    let getMealQuery = this.props.getMealQuery\r\n    let mealsByID = {}\r\n    if (!getMealQuery.loading) {\r\n      mealsByID = keyBy(this.props.getMealQuery.meals, 'id')\r\n      console.log(mealsByID, 'mealsByID')\r\n\r\n    }\r\n\r\n    let cuisineOptions = this.cuisineOptions();\r\n    cuisineOptions = cuisineOptions.map(cu => <option\r\n\r\n      value={cu.id} key={cu.id}>{cu.name}</option>)\r\n    let mealOptions = <option></option>\r\n    if (this.state.mealOptions.length) {\r\n\r\n      mealOptions = this.state.mealOptions.map(({ meal_id }) => (\r\n        <option key={meal_id}\r\n\r\n          value={meal_id} > {mealsByID[meal_id].type}</option >)\r\n      )\r\n\r\n    }\r\n\r\n    let Go = this.state.loading ? \"Please Wait ...\" : \"↪ Go!\"\r\n    let title = (recipe.name ? <h2>Edit Recipe {recipe.name}</h2>\r\n      : <h2>No recipes Selected...</h2>)\r\n    return (\r\n      <div id=\"cuisine-details\" >\r\n\r\n        {title}\r\n        <hr />\r\n\r\n        <br />\r\n        <form id=\"edit-recipe\"\r\n          className=\"recipes-container\"\r\n          onSubmit={this.onSubmitForm.bind(this)}  >\r\n          <fieldset disabled={!recipe.name || this.state.loading === \"true\"}>\r\n            <label htmlFor=\"cuisine_id\">Cuisine</label>\r\n            <select\r\n              value={this.state.selected}\r\n              name=\"cuisine_id\" id=\"cuisine_id\"\r\n              onChange={(e) => this.onChangeCuisine(e.target.value)} >\r\n              <option value=\"\" disabled={this.state.disableFirst}>Select Cuisine...</option>\r\n              {cuisineOptions}\r\n            </select>\r\n            <label htmlFor=\"meal_id\">Meal</label>\r\n            <select\r\n              ref={(input) => this.selectVal = input}\r\n              onChange={(e) => this.onChangeMealHandeler(e)\r\n              }\r\n              value={this.state.selected_meal_id}\r\n              name=\"meal_id\" id=\"meal_id\">{mealOptions} </select>\r\n            <button className=\"submit-edit\">{Go}</button>\r\n          </fieldset>\r\n        </form>\r\n        <ToastContainer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default\r\n  compose(\r\n    graphql(getMealCuisinePivotQuery, { name: \"getMealCuisinePivotQuery\" }),\r\n    graphql(getCuisineQuery, { name: \"getCuisineQuery\" }),\r\n    graphql(getRecipyQuery, { name: \"getRecipyQuery\" }),\r\n    graphql(updateRecipeMutation, { name: \"updateRecipeMutation\" }),\r\n    graphql(getMealQuery, { name: \"getMealQuery\" }))\r\n\r\n    (EditRecipe);\r\n","import React from 'react';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <div className=\"double-bounce1\"></div>\r\n      <div className=\"double-bounce2\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Spinner;\r\n","import React, { Component } from 'react';\r\nimport { graphql } from 'react-apollo';\r\nimport { getOneCuisine } from \"../queries/query\";\r\nimport Spinner from \"./Spinner\";\r\n\r\nclass CuisineName extends Component {\r\n\r\n\r\n  displayCuisineName() {\r\n    if (this.props.data.loading && this.props.cuisine_id)\r\n      return <Spinner />\r\n    const { cuisine } = this.props.data\r\n\r\n\r\n    if (cuisine && this.props.cuisine_id) return (\r\n\r\n      <p>🌌<b> Cuisine : </b> {cuisine.name}</p>\r\n\r\n\r\n\r\n    )\r\n    else return (<span></span>)\r\n  }\r\n\r\n  render() {\r\n    let cuisineName = this.displayCuisineName()\r\n    return (\r\n      <React.Fragment>\r\n        {cuisineName}\r\n      </React.Fragment>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default graphql(getOneCuisine, {\r\n\r\n  options: (props) => { return { variables: { id: props.cuisine_id } } }\r\n})(CuisineName);\r\n","import React, { Component } from 'react';\r\nimport { graphql } from 'react-apollo';\r\nimport { getOneMeal } from \"../queries/query\";\r\nimport Spinner from \"./Spinner\";\r\n\r\nclass MealType extends Component {\r\n\r\n\r\n  displayMealType() {\r\n    if (this.props.data.loading && this.props.meal_id)\r\n      return <Spinner />\r\n    const { meal } = this.props.data\r\n\r\n\r\n    if (meal && this.props.meal_id) return (\r\n\r\n      <p>🌌<b> Meal : </b> {meal.type}</p>\r\n\r\n\r\n\r\n    )\r\n    else {\r\n      console.log('mealFail', this.props)\r\n\r\n      return (<span></span>)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    console.log('this.props', this.props)\r\n    let MealType = this.displayMealType()\r\n    return (\r\n      <React.Fragment>\r\n        {MealType}\r\n      </React.Fragment>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default graphql(getOneMeal, {\r\n\r\n  options: (props) => { return { variables: { id: props.meal_id } } }\r\n})(MealType);\r\n","import React, { Component } from 'react';\r\nimport { graphql } from 'react-apollo';\r\nimport { getOneRecipy } from \"../queries/query\";\r\nimport CuisineName from \"./CuisineName\";\r\nimport MealType from \"./MealType\";\r\n\r\nclass Recipy extends Component {\r\n\r\n  render() {\r\n\r\n    let recipy = this.props.data.recipy; let cuisine_id = ''; let meal_id = ''\r\n    if (recipy) {\r\n      cuisine_id = recipy.cuisine_id\r\n      meal_id = recipy.meal_id\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <CuisineName cuisine_id={cuisine_id} />\r\n        <MealType meal_id={meal_id} />\r\n      </React.Fragment>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default graphql(getOneRecipy, {\r\n\r\n  options: (props) => { return { variables: { id: props.recipy_id } } }\r\n})(Recipy);\r\n","import React, { Component } from 'react';\r\nimport { graphql } from 'react-apollo';\r\nimport { getRecipyQuery } from \"../queries/query\";\r\nimport EditRecipe from \"./EditRecipe\";\r\nimport Recipy from \"./Recipy\";\r\nexport class Recipes extends Component {\r\n  state = {\r\n    disableFirst: false,\r\n    selected: {}\r\n  }\r\n\r\n  displayRecipes() {\r\n    var data = this.props.data;\r\n    console.log('data REcipe', data)\r\n    if (data.recipes)\r\n      return data.recipes.map(recipe => (\r\n        <option\r\n          value={recipe.id}\r\n\r\n          key={recipe.id}>{recipe.name}</option>))\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    let firstOptionMessage = this.props.data.loading ? 'Loading...' : \"Select Recipe\"\r\n    let desc = '', name = \"\"\r\n    if (this.state.selected && this.state.selected.description) {\r\n      desc = (<p>🌌<b> Desciption:</b> {this.state.selected.description}</p>)\r\n      name = (<h4> Name : {this.state.selected.name}</h4>)\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"recipes-container\">\r\n          Recipy List\r\n          <select id=\"recipe-list\"\r\n            disabled={this.props.data.loading}\r\n            onChange={(e) => this.setState({ disableFirst: true, selected: this.props.data.recipes.find(r => r.id === e.target.value) })} >\r\n            <option disabled={this.state.disableFirst} value={undefined} >{firstOptionMessage}</option>\r\n            {this.displayRecipes()}\r\n          </select>\r\n          <hr />\r\n          {name}\r\n          <Recipy recipy_id={this.state.selected.id} />\r\n\r\n          {desc}\r\n        </div>\r\n        <EditRecipe recipe={this.state.selected} notSelect={() => this.setState({ selected: null })} />\r\n      </React.Fragment>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default\r\n  graphql(getRecipyQuery)(Recipes); \r\n","\nimport Recipes from \"./components/Recipes\";\n\n\n\nfunction App() {\n  return (\n    <div id=\"main\">\n      <h1>AMIR GRAPHQL</h1>\n      <Recipes />\n\n      {/* <AddBook /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ApolloClient from 'apollo-boost';\nimport React from 'react';\nimport { ApolloProvider } from 'react-apollo';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n\n\n// Pass your GraphQL endpoint to uri\nconst client = new ApolloClient({ uri: '/graphql' });\n\nconst ApolloApp = AppComponent => (\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ApolloProvider>\n);\n\nReactDOM.render(ApolloApp(App), document.getElementById('root'));\n\n\n// .render(\n//   ,\n//   document.getElementById('root')\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}